# load a package every time you wish to use it
library(ggplot2)
# read in data
mpg = read.table("mpg.txt", header=TRUE, sep="\t", stringsAsFactors=FALSE)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/)
# read in data
mpg = read.table("mpg.txt", header=TRUE, sep="\t", stringsAsFactors=FALSE)
library(cowplot)
# read in data
mpg = read.table("mpg.txt", header=TRUE, sep="\t", stringsAsFactors=FALSE)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/)
# read in data
mpg = read.table("mpg.txt", header=TRUE, sep="\t", stringsAsFactors=FALSE)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/)
# read in data
mpg = read.table("mpg.txt", header=TRUE, sep="\t", stringsAsFactors=FALSE)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/)
## Question 1
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/Biocomputing_Exercise07//")
## Question 1
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing///")
## Question 1
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing//")
# read in data
mpg = read.table("mpg.txt", header=TRUE, sep="\t", stringsAsFactors=FALSE)
dim(mpg)
head(mpg)
# plot of displacement (engine size) vs. city miles per gallon (cty)
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point()
# remove grey background
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point() +
theme_bw()
# remove grey background and gridlines
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point() +
theme_classic()
# arguments to geom_point() can alter the appearance of the points
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point(color = "blue", shape = 22, size = 3) +
xlab("displacment (l)") +
ylab("miles per gallon-city") +
theme_classic()
# log transform the y-axis
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point() +
xlab("displacment (l)") +
ylab("miles per gallon-city") +
scale_y_log10() +
theme_classic()
# categorical - change display colors
ggplot(data = mpg,
aes(x = displ, y = cty, color = as.factor(cyl))) +
geom_point() +
xlab("discplacement (l)") +
ylab("miles per gallon-city") +
scale_color_manual(values = c('red','green','blue','orange')) +
theme_classic() +
theme(legend.title=element_blank())
# add a linear trendline with a new layer
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point() +
xlab("displacment (l)") +
ylab("miles per gallon-city") +
stat_smooth(method="lm") +
theme_classic()
# challenge 1:
# A scatter plot of miles per gallon city versus miles per gallon highway.
# Color code the points by 'drv'.
# Add a single linear trendline to the plot.
ggplot(data=mpg,
aes(x=cty,y=hwy))+
xlab("miles per gallon (city)") +
ylab("miles per gallon (highway)") +
geom_point(aes(color=drv)) +
stat_smooth(method="lm") +
theme_classic()
# challenge 1:
# A scatter plot of miles per gallon city versus miles per gallon highway.
# Color code the points by 'drv'.
# Add a single linear trendline to the plot.
ggplot(data=mpg,
aes(x=cty,y=hwy))+
xlab("miles per gallon (city)") +
ylab("miles per gallon (highway)") +
geom_point(aes(color=drv)) +
stat_smooth(method="lm") +
theme_classic()
# same plot as above, but three distinct trendlines
ggplot(data=mpg,
aes(x=cty,y=hwy,color=drv))+
xlab("miles per gallon (city)") +
ylab("miles per gallon (highway)") +
geom_point() +
stat_smooth(method="lm") +
theme_classic()
# challenge 2:
# A "density plot" of engine displacement.
ggplot(mpg,
aes(x=displ)) +
geom_density() +
theme_classic()
# challenge 3:
# A facet grid of plots
# Each plot shows engine size (displ) vs. hwy
ggplot(mpg,
aes(x = displ, y = hwy, color = manufacturer)) +
geom_point() +
facet_wrap(~manufacturer) +
xlab("displacement (l)") +
ylab("miles per gallon (highway)") +
theme_classic() +
theme(legend.position = "none")
# read in data
mpg <- read.csv("mpg2.csv", header = TRUE, stringsAsFactors = FALSE)
dim(mpg)
head(mpg)
# bar plot showing counts of observations by manufacturer
ggplot(mpg, aes(x = manufacturer)) +
geom_bar() +
theme_bw() +
xlab("Manufacturer") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
# make you're own theme!
theme_Lect24 <- function(){
theme_bw() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
}
# stacked bar plot showing counts of observations by manufacturer
# and car class
ggplot(mpg, aes(x = manufacturer, fill = class)) +
geom_bar() +
xlab("Manufacturer") +
theme_Lect24()
# make you're own theme!
theme_Lect21 <- function(){
theme_bw() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
}
View(theme_Lect24)
View(theme_Lect24)
View(theme_Lect24)
View(theme_Lect24)
# violin plot show the full distribution of the data
ggplot(mpg, aes(x = class, y = hwy)) +
geom_violin(fill = "blue") +
xlab("Car class") +
ylab("Mileage per gallon (highway)") +
theme_Lect21()
# violin plot show the full distribution of the data
ggplot(mpg, aes(x = class, y = hwy)) +
geom_violin(fill = "cyan") +
xlab("Car class") +
ylab("Mileage per gallon (highway)") +
theme_Lect21()
# violin plot show the full distribution of the data
ggplot(mpg, aes(x = class, y = hwy)) +
geom_violin(fill = "silver") +
xlab("Car class") +
ylab("Mileage per gallon (highway)") +
theme_Lect21()
# violin plot show the full distribution of the data
ggplot(mpg, aes(x = class, y = hwy)) +
geom_violin(fill = "magenta") +
xlab("Car class") +
ylab("Mileage per gallon (highway)") +
theme_Lect21()
# violin plot show the full distribution of the data
ggplot(mpg, aes(x = class, y = hwy)) +
geom_violin(fill = "periwinkle") +
xlab("Car class") +
ylab("Mileage per gallon (highway)") +
theme_Lect21()
# violin plot show the full distribution of the data
ggplot(mpg, aes(x = class, y = hwy)) +
geom_violin(fill = "yellow") +
xlab("Car class") +
ylab("Mileage per gallon (highway)") +
theme_Lect21()
# plot of average highway mpg for each car class
ggplot(mpg, aes(x = class, y = hwy)) +
stat_summary(fun.y = mean,
geom = "point") +
theme_bw() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
# plot of average highway mpg for each car class
ggplot(mpg, aes(x = class, y = hwy)) +
stat_summary(fun = mean,
geom = "point") +
theme_bw() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
# plot of average highway mpg +/- standard error for each
# car class
ggplot(mpg, aes(x = class, y = hwy)) +
stat_summary(fun.y = mean,
geom = "point") +
stat_summary(fun.data = mean_se,
geom = "errorbar",
width = 0.5) +
theme_bw() +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
# stacked bar plot showing counts of observations by transmission
# and year
ggplot(mpg, aes(x = trans, fill =year)) +
geom_bar() +
xlab("Transmission") +
theme_Lect21()
# stacked bar plot showing counts of observations by transmission
# and year
ggplot(mpg, aes(x = trans, fill = class)) +
geom_bar() +
xlab("Transmission") +
theme_Lect21()
# stacked bar plot showing counts of observations by manufacturer
# and car class
ggplot(mpg, aes(x = manufacturer, fill = class)) +
geom_bar() +
xlab("Manufacturer") +
theme_Lect24()
# stacked bar plot showing counts of observations by transmission
# and year
ggplot(mpg, aes(x = trans, fill = year)) +
geom_bar() +
xlab("Transmission") +
theme_Lect21()
# stacked bar plot showing counts of observations by manufacturer
# and car class
ggplot(mpg, aes(x = manufacturer, fill = class)) +
geom_bar() +
xlab("Manufacturer") +
theme_Lect24()
# stacked bar plot showing counts of observations by transmission
# and year
ggplot(mpg, aes(x = trans, fill = asfactor(year)) +
geom_bar() +
xlab("Transmission") +
theme_Lect21()
# stacked bar plot showing counts of observations by transmission
# and year
ggplot(mpg, aes(x = trans, fill = asfactor(year)) +
geom_bar() +
xlab("Transmission") +
theme_Lect21()
# stacked bar plot showing counts of observations by transmission
# and year
ggplot(mpg, aes(x = trans, fill = as.factor(year)) +
geom_bar() +
xlab("Transmission") +
theme_Lect21()
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/Biocomputing-Ex-8/")
#Exercise 8
#Question 1 - Replicating the function of head
head_replicate <- function(file,num_lines){
print(file[1:num_lines,])
}
head_replicate(iris_data)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/")
head_replicate(iris_data)
head_replicate(iris_data,10)
head_replicate(wages.csv,10)
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/")
head_replicate(wages.csv,10)
head_replicate(mpg)
#Question 2
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/Biocomputing-Ex-8/")
head_replicate(iris)
head_replicate(iris_data)
head_replicate(iris_data,10)
head_replicate(iris,10)
head_replicate(iris,)
head_replicate(iris)
#Print first two rows of data set
head_replicate(iris,10)
#Print first five rows of data set
head_replicate(iris,5)
head_replicate(iris,20)
View(head_replicate)
#Question 2
#Load the data in 'iris.csv' file
irisEx8 <- read.csv('iris.csv', header=TRUE)
irisEx8
#a) Print last 2 rows and colums to the R terminal
nrow(irisEx8)
irisEx8[149:150,3:4]
#a) Print last 2 rows and colums to the R terminal
irisEx8[149:150,3:4]
#a) Print last 2 rows and colums to the R terminal
irisEx8[149:150,4:5]
#a) Print last 2 rows and colums to the R terminal
print(irisEx8[149:150,4:5])
#a) Print last 2 rows and colums to the R terminal
(irisEx8[149:150,4:5])
#b) get the number of observation for each species include in the data set
print(table(irisEx8$Species))
#b) get the number of observation for each species include in the data set
(table(irisEx8$Species))
#b) get the number of observation for each species include in the data set
unique(irisEx8$Species)
numSetsoa <- irisEx8[irisEx8$Species == 'setsoa',]
numSetsoa
nrow(numSetsoa)
View(numSetsoa)
#b)number of observation for each species include in the data set
table(irisEx8$Species)
irisEx8[irisEx8$Sepal.Width > 3.5,]
#b)number of observation for each species include in the data set
Observ_Species <- table(irisEx8$Species)
Observ_Species
print(Observ_Species)
#a) Print last 2 rows and colums to the R terminal
Last_rows_colums <-(irisEx8[149:150,4:5])
Last_rows_colums
print(Last_rows_colums)
#c) Rows with Sepal.Width > 3.5
Sepal.Width_Greater_3.5 <- irisEx8[irisEx8$Sepal.Width > 3.5,]
Sepal.Width_Greater_3.5
print(Sepal.Width_Greater_3.5)
#d)comma-delimated data for the species setsoa
SetsoaData=irisEx8[irisEx8$Species=="setsoa",]
Last_rows_colums
SetsoaData
#d)comma-delimated data for the species setsoa
SetsoaData <- irisEx8[irisEx8$Species=="setsoa",]
#d)comma-delimated data for the species setsoa
SetsoaData <- irisEx8[irisEx8$Species=="setsoa",]
SetsoaData
#d)comma-delimated data for the species setsoa
SetsoaData=subset[data, Species =="setsoa",]
#d)comma-delimated data for the species setsoa
SetsoaData=subset[data, Species =="setsoa"]
#d)comma-delimated data for the species setsoa
SetosaData=subset(data, Species == "setosa")
#d)comma-delimated data for the species setsoa
write.csv(irisEx8[irisEx8$Species == 'setsoa',], "setsoa.csv", row.names = FALSE)
#d)comma-delimated data for the species setsoa
write.csv(irisEx8[irisEx8$Species == 'setsoa',], "setsoa.csv", row.names = FALSE)
setsoa.csv
irisEx8
#d)comma-delimated data for the species setsoa
write.csv(irisEx8[irisEx8$Species == 'setsoa',], "setsoa.csv", row.names = FALSE)
#d)comma-delimated data for the species setsoaSetsoaData=irisEx8[irisEx8$Species=="setsoa",]
#d)comma-delimated data for the species setsoaSetsoaData=irisEx8[irisEx8$Species=="setsoa",]
SetosaData=irisEx8[irisEx8$Species=="setosa",]
SetosaData
View(SetosaData)
View(SetosaData)
View(SetsoaData)
#d)comma-delimated data for the species setosa
write.csv(irisEx8[irisEx8$Species == 'setosa',], "setosa.csv", row.names = FALSE)
SetosaData=irisEx8[irisEx8$Species=="setosa",]
#d)comma-delimated data for the species setosa
write.csv(irisEx8[irisEx8$Species == 'setosa',], "setosa.csv", row.names = FALSE)
SetosaData
SetosaData2=subset(data, Species == "setosa")
SetosaData=subset(data, Species == "setosa")
write.csv(SetosaData, "setosa.csv")
SetsoaData
write.csv(SetosaData, "setosa.csv")
SetosaData
write.csv(SetosaData, "setosa.csv")
#d)comma-delimated data for the species setosa
write.csv(irisEx8[irisEx8$Species == 'setosa',], "setosa.csv", row.names = FALSE)
head_replicate(irisEx8,6)
rm(SetsoaData)
rm(numSetsoa)
#d)comma-delimated data for the species setosa
write.csv(irisEx8[irisEx8$Species == 'setosa',], "setosa.csv", row.names = FALSE)
#e)mean, minimu and maximum of Petal.Length for observations form virginica
Virgincia_Data <- irisEx8[irisEx8$Species == "virgincia"],
View(irisEx8)
#e)mean, minimu and maximum of Petal.Length for observations form virginica
Virgincia_Data <- irisEx8[irisEx8$Species == "virginica"],
#e)mean, minimu and maximum of Petal.Length for observations form virginica
Virginica_Data <- irisEx8[irisEx8$Species == "virginica",]
Virginica_Data
mean(Virginica_Data)
mean(Virginica_Data$Petal.Length)
min(Virginica_Data$Petal.Length)
max(Virginica_Data$Petal.Length)
#a) Print last 2 rows and columns to the R terminal
Last_rows_colums <-(irisEx8[149:150,4:5])
#Exercise 8
#Question 1 - Replicating the function of head
head_replicate <- function(file,num_lines){
print(file[1:num_lines,])
}
#Set working directory to where the iris data set is located
setwd("/Users/jsobo/OneDrive/Documents/Intro to Biocomputing/Biocomputing-Ex-8/")
#Print first five rows of data set using the head replicate
head_replicate(iris,5)
#Question 2
#Load the data in 'iris.csv' file
irisEx8 <- read.csv('iris.csv', header=TRUE)
#a) Print last 2 rows and columns to the R terminal
Last_rows_colums <-(irisEx8[149:150,4:5])
print(Last_rows_colums)
#b)number of observation for each species include in the data set
Observ_Species <- table(irisEx8$Species)
print(Observ_Species)
#c) Rows with Sepal.Width > 3.5
Sepal.Width_Greater_3.5 <- irisEx8[irisEx8$Sepal.Width > 3.5,]
print(Sepal.Width_Greater_3.5)
#d)comma-delimited data for the species setosa
write.csv(irisEx8[irisEx8$Species == 'setosa',], "setosa.csv", row.names = FALSE)
#e)mean, minimum and maximum of Petal.Length for observations form virginica
Virginica_Data <- irisEx8[irisEx8$Species == "virginica",]
mean(Virginica_Data$Petal.Length)
min(Virginica_Data$Petal.Length)
max(Virginica_Data$Petal.Length)
